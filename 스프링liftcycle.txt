1.web.xml -> 브라우저 요청을 먼저 받는곳.
  	web.xml -> fillter가 있다면 특정 작업처리(인코딩 처리)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2.web.xml의 DispatcherServlet이 Controller로 요청이 넘어가기전에
	가로채서 <init-param>부분에 있는 servlet-context.xml로 전달된다.
 *<servlete-mapping>
	요청 URL패턴을 지정하는 부분.ex)xxxx.do -> <url-pattern>에*.do로 지정하면 된다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3.servlet-context.xml -> 브라우저 요청을 Controller랑 연결시켜주는
	HandlerMapping,HadlerAdapter의 작업을 진행하는 곳.
 *<context:component-scan base-package="com.spring.example"/>
	@Controller, @Repository, @Service, @Component 어노테이션이 
	사용된 클래스를 자동으로 스캔하여 빈으로 등록한다. 
 *<annotation-driven/>
	@RequestMapping을 사용할 수 있게 해준다.
	이 설정을 통해 URL 매핑이 일어난다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4.xxxController.java
	servlet-context.xml에서 연결시켜주는 controller return을 통해 view로 전달한다.
 *model.addAttribute("이름,객체)
	Model객체에 특정 이름을 지정하여 부에서 이름을 이용해 객체를 처리할 수 있다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5.servlet-context.xml
	controller에서 리턴한 이름으로
 *beans:bean 의 InternalResourceViewResolver를 통해 뷰를 찾게 된다.
	만들어진  뷰 URL은 DispatcherServlet으로 전달된다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
6.최종적으로 뷰 이름은 DispatcherServlet으로 넘어가게 되고 이것이 브라우저로 전달된다.

